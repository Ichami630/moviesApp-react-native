// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"
)

const createMetric = `-- name: CreateMetric :one
INSERT INTO metric (search_term,count,poster_url,movie_id,title)
VALUES ($1,$2,$3,$4,$5)
RETURNING id
`

type CreateMetricParams struct {
	SearchTerm string `json:"search_term"`
	Count      *int32 `json:"count"`
	PosterUrl  string `json:"poster_url"`
	MovieID    string `json:"movie_id"`
	Title      string `json:"title"`
}

func (q *Queries) CreateMetric(ctx context.Context, arg CreateMetricParams) (string, error) {
	row := q.db.QueryRow(ctx, createMetric,
		arg.SearchTerm,
		arg.Count,
		arg.PosterUrl,
		arg.MovieID,
		arg.Title,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAllMetric = `-- name: GetAllMetric :many
SELECT id, search_term, count, poster_url, movie_id, title, created_at, updated_at FROM metric
ORDER BY count DESC
LIMIT 5
`

func (q *Queries) GetAllMetric(ctx context.Context) ([]Metric, error) {
	rows, err := q.db.Query(ctx, getAllMetric)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Metric{}
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.SearchTerm,
			&i.Count,
			&i.PosterUrl,
			&i.MovieID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMetricByTitle = `-- name: GetMetricByTitle :one
SELECT id, search_term, count, poster_url, movie_id, title, created_at, updated_at FROM metric WHERE title = $1
`

func (q *Queries) GetMetricByTitle(ctx context.Context, title string) (Metric, error) {
	row := q.db.QueryRow(ctx, getMetricByTitle, title)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.SearchTerm,
		&i.Count,
		&i.PosterUrl,
		&i.MovieID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMetric = `-- name: UpdateMetric :exec
UPDATE metric SET count = count + 1
WHERE id = $1
`

func (q *Queries) UpdateMetric(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, updateMetric, id)
	return err
}
